
// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Threading;

namespace IGeekFan.AspNetCore.Identity.FreeSql
{
    /// <summary>
    ///     This is an internal API that supports the FreeSql infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new FreeSql release.
    /// </summary>
    internal static class CoreStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("IGeekFan.AspNetCore.Identity.FreeSql.Properties.CoreStrings", typeof(CoreStrings).Assembly);

        /// <summary>
        ///     [ProtectedPersonalData] only works strings by default.
        /// </summary>
        public static string CanOnlyProtectStrings
            => GetString("CanOnlyProtectStrings");

        /// <summary>
        ///     AddFreeSqlStores can only be called with a role that derives from IdentityRole&lt;TKey&gt;.
        /// </summary>
        public static string NotIdentityRole
            => GetString("NotIdentityRole");

        /// <summary>
        ///     AddFreeSqlStores can only be called with a user that derives from IdentityUser&lt;TKey&gt;.
        /// </summary>
        public static string NotIdentityUser
            => GetString("NotIdentityUser");

        /// <summary>
        ///     Role {name} does not exist.
        /// </summary>
        public static string RoleNotFound(object name)
            => string.Format(
                GetString("RoleNotFound", nameof(name)),
                name);

        /// <summary>
        ///     Value cannot be null or empty.
        /// </summary>
        public static string ValueCannotBeNullOrEmpty
            => GetString("ValueCannotBeNullOrEmpty");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}

